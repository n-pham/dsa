name: Fetch and Check LeetCode Daily Problem

on:
  workflow_dispatch: # Trigger manually or schedule it
  schedule:
    - cron: '5 0 * * *' # Runs daily at 0:5 UTC

jobs:
  fetch-daily-problem:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1 # Perform a shallow checkout

      - name: Fetch LeetCode Daily Problem
        id: fetch_problem
        run: |
          curl -X POST https://leetcode.com/graphql \
          -H "Content-Type: application/json" \
          -d '{"query":"query questionOfToday { activeDailyCodingChallengeQuestion { date question { title titleSlug difficulty acRate questionFrontendId } } }"}' > response.json
          cat response.json

      - name: Parse Problem Details
        id: parse_problem
        run: |
          TITLE=$(jq -r '.data.activeDailyCodingChallengeQuestion.question.title' response.json)
          SLUG=$(jq -r '.data.activeDailyCodingChallengeQuestion.question.titleSlug' response.json)
          DIFFICULTY=$(jq -r '.data.activeDailyCodingChallengeQuestion.question.difficulty' response.json)
          PROBLEM_ID=$(jq -r '.data.activeDailyCodingChallengeQuestion.question.questionFrontendId' response.json)
          DATE=$(jq -r '.data.activeDailyCodingChallengeQuestion.date' response.json | sed 's/-//g') # Convert date to YYYYMMDD format
          echo "Today's LeetCode Problem: $TITLE"
          echo "Problem ID: $PROBLEM_ID"
          echo "Difficulty: $DIFFICULTY"
          echo "Date: $DATE"
          echo "Link: https://leetcode.com/problems/$SLUG/"
          echo "::set-output name=problem_id::$PROBLEM_ID"
          echo "::set-output name=title::$TITLE"
          echo "::set-output name=difficulty::$DIFFICULTY"
          echo "::set-output name=slug::$SLUG"
          echo "::set-output name=date::$DATE"

      - name: Check if Problem Already Solved
        id: check_solved
        run: |
          PROBLEM_ID=${{ steps.parse_problem.outputs.problem_id }}
          if grep -Fxq "$PROBLEM_ID" solved_problems.txt; then
            echo "::set-output name=status::Solved"
          else
            echo "::set-output name=status::New"
          fi

      - name: Create GitHub Issue
        uses: actions/github-script@v6
        with:
          script: |
            const status = `{{ steps.check_solved.outputs.status }}`;
            const title = `{{ steps.parse_problem.outputs.title }}`;
            const difficulty = `{{ steps.parse_problem.outputs.difficulty }}`;
            const problemId = `{{ steps.parse_problem.outputs.problem_id }}`;
            const slug = `{{ steps.parse_problem.outputs.slug }}`;
            const date = `{{ steps.parse_problem.outputs.date }}`;
            const issueTitle = `${date} - ${status} LeetCode ${difficulty} ${problemId} ${title}`;
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueTitle,
            });
            console.log(`Created issue: ${issue.html_url}`);